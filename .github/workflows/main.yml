name: OpenJDK CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main, ci ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          path: openjdk
          
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Runs a single command using the runners shell
      - name: Install Modus
        run: cargo install modus

      - name: Display proof trees
        run: ~/.cargo/bin/modus proof $GITHUB_WORKSPACE/openjdk -f <(cat $GITHUB_WORKSPACE/openjdk/*.Modusfile) 'openjdk(A, B, C)' --compact
        
      - name: Build Linux images
        run: ~/.cargo/bin/modus build $GITHUB_WORKSPACE/openjdk -f <(cat $GITHUB_WORKSPACE/openjdk/*.Modusfile) 'openjdk(A, B, C)' --json > build.json

      - name: Tag images
        run: jq '.[] | [.digest, (.args | join("-"))] | join(" ")' build.json | xargs -I % sh -c 'docker tag %'
        
      - name: Push packages
        run: jq '.[].args | join("-")' build.json | xargs -I % sh -c 'docker tag % ghcr.io/$GITHUB_REPOSITORY:% && docker push ghcr.io/$GITHUB_REPOSITORY:%'
        
      - name: Compare image sizes
        run: |
          jq '.[].args | join("-")' build.json | xargs -I % sh -c "echo -n '% '; docker image inspect % | jq .[].Size -j; echo -n ' '; docker pull openjdk:% -q > /dev/null; docker image inspect openjdk:% | jq .[].Size" > compare.txt;
          cat compare.txt | awk '{print $1, ($2 - $3 > 0 ? $2 - $3 : $3 - $2);}' | sort -n -k2;

      - name: View docker images
        run: docker images
