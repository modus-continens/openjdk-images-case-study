# Could have a prefix predicate?
is_alpine(VARIANT, ALPINE_VERSION) :- VARIANT = f"alpine${ALPINE_VERSION}".
is_oracle(VARIANT, ORACLE_VERSION) :- VARIANT = f"oraclelinux${ORACLE_VERSION}".

oracle_commands(INSTALLER, CLEANER, ORACLE_VERSION) :-
    (ORACLE_VERSION = "7", INSTALLER = "yum install -y", CLEANER = "rm -rf /var/cache/yum")
    ;
    (INSTALLER = "microdnf install", CLEANER = "microdnf clean all").

debian_suffix(SUFFIX, JAVA_TYPE) :- (JAVA_TYPE = "jdk", SUFFIX = "-scm"), SUFFIX = "-curl".
debian_image(VARIANT, JAVA_TYPE) :-
    (
        VARIANT = f"slim-${debian_suite}",
        IMAGE_NAME = f"debian:${rest}-slim",
        from(IMAGE_NAME)
    )
    ;
    (
        debian_suffix(SUFFIX, JAVA_TYPE),
        IMAGE_NAME = f"buildpack-deps:${VARIANT}${SUFFIX}",
        from(IMAGE_NAME)
    ).
debian_packages(PACKAGES, VARIANT, MAJOR_VERSION) :-
    # TODO: determine exact packages to install to base l78-101
    PACKAGES = "bzip2 unzip xz-utils binutils fontconfig libfreetype6 ca-certificates p11-kit".

backwards_compatibility(JAVA_HOME) :-
    run("{ echo '#/bin/sh'; echo 'echo \"${JAVA_HOME}\"'; } > /usr/local/bin/docker-java-home \
         && chmod +x /usr/local/bin/docker-java-home \
         && [ \"${JAVA_HOME}\" = \"$(docker-java-home)\" ]").

locale(VARIANT, LANG) :-
    (
        is_oracle(VARIANT, ORACLE_VERSION),
        ORACLE_VERSION = "7",
        LANG = "en_US.UTF-8"
    )
    ;
    (
        # TODO: make sure this is ok to set on Alpine
        LANG = "C.UTF-8"
    ).

# Selects base image and runs relevant initial commands to prepare it.
base_image(MAJOR_VERSION, VARIANT, JAVA_HOME) :-
    (
        is_alpine(VARIANT, ALPINE_VERSION),
        from(f"alpine:${ALPINE_VERSION}")
        run("apk add --no-cache java-cacerts"),
        JAVA_HOME = f"/opt/openjdk-${MAJOR_VERSION}"
    )
    ;
    (
        is_oracle(VARIANT, ORACLE_VERSION),
        oracle_commands(INSTALLER, CLEANER, ORACLE_VERSION),
        from(f"oraclelinux:${ORACLE_VERSION}-slim"),
        run(f"set -eux; \
              ${INSTALLER} gzip tar binutils freetype fontconfig; \
              ${CLEANER}"),
        JAVA_HOME = f"/usr/java/openjdk-${MAJOR_VERSION}"
    )
    ;
    (
        # else debian
        debian_image(VARIANT, JAVA_TYPE),
        debian_packages(PACKAGES, VARIANT, MAJOR_VERSION),
        run("set -eux; \
             apt-get update; \
             apt-get install -y --no-install-recommends ${PACKAGES}; \
             rm -rf /var/lib/apt/lists/*")
        JAVA_HOME = f"/usr/local/openjdk-${MAJOR_VERSION}",
    ).

openjdk(MAJOR_VERSION, VERSION, JAVA_TYPE, ARCH, VARIANT, GPG_KEYS) :-
    openjdk_config(VERSION, JAVA_TYPE, ARCH, VARIANT, DOWNLOAD_URL),

    base_image(MAJOR_VERSION, VARIANT, JAVA_HOME),
    backwards_compatibility(JAVA_HOME),
    append_path(f"${JAVA_HOME}/bin"), # replacement for `ENV PATH $JAVA_HOME/bin:$PATH`
    locale(VARIANT, LANG),
    # TODO

# Valid variations of OpenJDK
# TODO: proper GPG keys
openjdk_config("11", "11.0.13", "jdk", "amd64", "bullseye", "https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.13%2B8/OpenJDK11U-jdk_x64_linux_11.0.13_8.tar.gz").
openjdk_config("17", "17.0.2", "jdk", "amd64", "slim-buster", "https://download.java.net/java/GA/jdk17.0.2/dfd4a8d0985749f896bed50d7138ee7f/8/GPL/openjdk-17.0.2_linux-x64_bin.tar.gz").
openjdk_config("18", "18-ea+11", "jdk", "amd64", "alpine3.15", "https://download.java.net/java/early_access/alpine/11/binaries/openjdk-18-ea+11_linux-x64-musl_bin.tar.gz").
