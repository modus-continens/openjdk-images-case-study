# Could have a prefix predicate?
is_alpine(VARIANT, ALPINE_VERSION) :- VARIANT = f"alpine${ALPINE_VERSION}".
is_oracle(VARIANT, ORACLE_VERSION) :- VARIANT = f"oraclelinux${ORACLE_VERSION}".
is_debian(VARIANT) :- debian_variant(VARIANT). # HACK: to determine if (non-slim) debian base image, should replace.
is_debian_slim(VARIANT, DEBIAN_SUITE) :- VARIANT = f"slim-${DEBIAN_SUITE}".

oracle_installer_cleaner_version("yum install -y", "rm -rf /var/cache/yum", "7").
oracle_installer_cleaner_version("microdnf install", "microdnf clean all", oracle_version)
    :- number_gt(oracle_version, "7").

debian_suffix_type("-scm", "jdk").
debian_suffix_type("-curl", "jre").

debian_image(VARIANT, JAVA_TYPE) :-
    (
        is_debian_slim(VARIANT, DEBIAN_SUITE),
        IMAGE_NAME = f"debian:${DEBIAN_SUITE}-slim",
        from(IMAGE_NAME)
    ;
        is_debian(VARIANT),
        debian_suffix_type(SUFFIX, JAVA_TYPE),
        IMAGE_NAME = f"buildpack-deps:${VARIANT}${SUFFIX}",
        from(IMAGE_NAME)
    ).
debian_packages(PACKAGES, VARIANT, MAJOR_VERSION) :-
    (
        is_debian_slim(VARIANT, DEBIAN_SUITE),
        PACKAGES = "ca-certificates p11-kit"
    ;
        is_debian(VARIANT),
        number_geq(MAJOR_VERSION, "13"),
        PACKAGES = "bzip2 unzip xz-utils binutils fontconfig libfreetype6 ca-certificates p11-kit"
    ;
        is_debian(VARIANT),
        number_gt("13", MAJOR_VERSION),
        PACKAGES = "bzip2 unzip xz-utils fontconfig libfreetype6 ca-certificates p11-kit"
    ).

backwards_compatibility(MAJOR_VERSION, JAVA_HOME) :-
    # backwards compatibility for debian versions < 16
    (
        number_gt("16", MAJOR_VERSION),
        run(f"{ echo '#/bin/sh'; echo 'echo \"${JAVA_HOME}\"'; } > /usr/local/bin/docker-java-home \
              && chmod +x /usr/local/bin/docker-java-home \
              && [ \"${JAVA_HOME}\" = \"\$(docker-java-home)\" ]")
    ;
        number_geq(MAJOR_VERSION, "16"),
        JAVA_HOME = JAVA_HOME,
        run("")
    ).

locale(VARIANT, LANG) :-
    (
        is_oracle(VARIANT, "7"),
        LANG = "en_US.UTF-8"
    ;
        !is_oracle(VARIANT, "7"),
        LANG = "C.UTF-8"
    ).

# Selects base image and runs relevant initial commands to prepare it.
base_image(MAJOR_VERSION, VARIANT, JAVA_HOME, JAVA_TYPE, BASE_SETUP_COMMAND) :-
    (
        is_alpine(VARIANT, ALPINE_VERSION),
        from(f"alpine:${ALPINE_VERSION}"),
        BASE_SETUP_COMMAND = "apk add --no-cache java-cacerts",
        JAVA_HOME = f"/opt/openjdk-${MAJOR_VERSION}"
    ;
        is_oracle(VARIANT, ORACLE_VERSION),
        oracle_installer_cleaner_version(INSTALLER, CLEANER, ORACLE_VERSION),
        from(f"oraclelinux:${ORACLE_VERSION}-slim"),
        BASE_SETUP_COMMAND = f"set -eux; \
                              ${INSTALLER} gzip tar binutils freetype fontconfig; \
                              ${CLEANER}",
        JAVA_HOME = f"/usr/java/openjdk-${MAJOR_VERSION}"
    ;
        !(is_alpine(VARIANT, _) ; is_oracle(VARIANT, _)),
        debian_image(VARIANT, JAVA_TYPE),
        debian_packages(PACKAGES, VARIANT, MAJOR_VERSION),
        BASE_SETUP_COMMAND = f"set -eux; \
                              apt-get update; \
                              apt-get install -y --no-install-recommends ${PACKAGES}; \
                              rm -rf /var/lib/apt/lists/*",
        JAVA_HOME = f"/usr/local/openjdk-${MAJOR_VERSION}",
        backwards_compatibility(MAJOR_VERSION, JAVA_HOME)
    ).

gpg_check(GETTER, SOURCE) :-
    (
        SOURCE = "adopt",
        run(f"${GETTER} openjdk.tgz.asc \"`cat /tmp/downloadUrl`.sign\""),
        run("set -eux; \
             export GNUPGHOME=\"$(mktemp -d)\"; \
             echo \"$GNUPGHOME\" > /tmp/GNUPGHOME; \
             gpg --batch --keyserver keyserver.ubuntu.com --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671; \
             gpg --batch --keyserver keyserver.ubuntu.com --keyserver-options no-self-sigs-only --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \
             gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F \
                 | tee /dev/stderr \
                 | grep '0xA5CD6035332FA671' \
                 | grep 'Andrew Haley'; \
             gpg --batch --verify openjdk.tgz.asc openjdk.tgz;"),
        run("gpgconf --kill all;"),
        run("rm -rf \"`cat /tmp/GNUPGHOME`\"")
    ;
        SOURCE != "adopt",
        run("")
    ).

extract_bin(JAVA_HOME) :-
    run(f"mkdir -p ${JAVA_HOME}; \
          tar --extract \
                  --file openjdk.tgz \
                  --directory \"${JAVA_HOME}\" \
                  --strip-components 1 \
                  --no-same-owner \
          ; \
          rm openjdk.tgz*;").

install_bin(AMD64_URL, ARM64_URL, JAVA_HOME, SOURCE) :-
    ARCH_PRINTER = "apk --print-arch",
    AMD64_MATCH = "x86_64",
    ARM64_MATCH = "aarch64",
    GETTER = "wget -O",

    # It shouldn't really matter that the binary we're downloading/extracting here may not work
    # on alpine, since we will just copy the extracted files into the correct base image later.
    # So this is fine as long as we don't try to execute it here.
    from("alpine:latest"),
    run("apk add gnupg"),
    run(f"set -eux; \
          arch=\"\$(${ARCH_PRINTER})\"; \
          case \"\$arch\" in \
              '${AMD64_MATCH}') \
                  downloadUrl='${AMD64_URL}'; \
                  ;; \
              '${ARM64_MATCH}') \
                  downloadUrl='${ARM64_URL}'; \
                  ;; \
              *) echo >&2 \"error: unsupported architecture: '\$arch'\"; exit 1 ;; \
          esac; \
          echo \"$downloadUrl\" > /tmp/downloadUrl; \
          ${GETTER} openjdk.tgz \"\$downloadUrl\";"),
    gpg_check(GETTER, SOURCE),
    extract_bin(JAVA_HOME),
    run("rm -rf /tmp/downloadUrl").

ca_certs(MAJOR_VERSION, JAVA_TYPE, VARIANT, JAVA_HOME) :-
    (
        MAJOR_VERSION = "8", JAVA_TYPE = "jdk",
        CACERTS_FILE = f"${JAVA_HOME}/jre/lib/security/cacerts"
    ;
        (number_gt(MAJOR_VERSION, "8") ; JAVA_TYPE = "jre"),
        CACERTS_FILE = f"${JAVA_HOME}/lib/security/cacerts"
    ),
    (
        is_alpine(VARIANT, ALPINE_VERSION),
        run(f"rm -rf \"${CACERTS_FILE}\"; \
              ln -sT /etc/ssl/certs/java/cacerts \"${CACERTS_FILE}\";")
    ;
        is_oracle(VARIANT, ORACLE_VERSION),
        run(f"rm -rf \"${CACERTS_FILE}\"; \
              ln -sT /etc/pki/ca-trust/extracted/java/cacerts \"${CACERTS_FILE}\"; \
              \
              ln -sfT \"${JAVA_HOME}\" /usr/java/default; \
              ln -sfT \"${JAVA_HOME}\" /usr/java/latest; \
              for bin in \"${JAVA_HOME}/bin/\"*; do \
              base=\"\$(basename \"\$bin\")\"; \
              [ ! -e \"/usr/bin/\$base\" ]; \
              alternatives --install \"/usr/bin/\$base\" \"\$base\" \"\$bin\" 20000; \
              done;")
    ;
        (is_debian(VARIANT) ; is_debian_slim(VARIANT, DEBIAN_SUITE)),
        run(f"{ \
                  echo '#!/usr/bin/env bash'; \
                  echo 'set -Eeuo pipefail'; \
                  echo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth \"${CACERTS_FILE}\"'; \
              } > /etc/ca-certificates/update.d/docker-openjdk; \
              chmod +x /etc/ca-certificates/update.d/docker-openjdk; \
              /etc/ca-certificates/update.d/docker-openjdk; \
              \
              find \"${JAVA_HOME}/lib\" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf; \
              ldconfig;")
    ).

smoke_tests(MAJOR_VERSION, JAVA_TYPE) :-
    (
        MAJOR_VERSION = "8", JAVA_TYPE = "jdk",
        COMMAND = "javac -version; java -version"
    ;
        MAJOR_VERSION = "8", JAVA_TYPE = "jre",
        COMMAND = "java -version"
    ;
        number_gt(MAJOR_VERSION, "8"),
        (
            JAVA_TYPE = "jdk",
            COMMAND = "java -Xshare:dump; \
                       fileEncoding=\"$(echo 'System.out.println(System.getProperty(\"file.encoding\"))' | jshell -s -)\"; [ \"$fileEncoding\" = 'UTF-8' ]; rm -rf ~/.java; \
                       javac --version; \
                       java --version"
        ;
            JAVA_TYPE = "jre",
            COMMAND = "java -Xshare:dump; java --version"
        )
    ),
    run(COMMAND).

entry_sh(MAJOR_VERSION, JAVA_TYPE, VARIANT) :-
    (
        is_alpine(VARIANT, _), SHELL = "ash"
    ;
        !is_alpine(VARIANT, _), SHELL = "bash"
    ),
    (
        MAJOR_VERSION = "8", JAVA_TYPE = JAVA_TYPE,
        COMMAND = SHELL
    ;
        number_gt(MAJOR_VERSION, "8"), JAVA_TYPE = "jre",
        COMMAND = SHELL
    ;
        number_gt(MAJOR_VERSION, "8"), JAVA_TYPE = "jdk",
        COMMAND = "jshell" # jshell only launched if jdk
    ),
    run(f"echo '#!/bin/${SHELL}' > entry.sh; echo '${COMMAND}' >> entry.sh; chmod +x entry.sh").

openjdk_setup(MAJOR_VERSION, VERSION, JAVA_TYPE, VARIANT, AMD64_URL, ARM64_URL, SOURCE) :-
    openjdk_config(MAJOR_VERSION, VERSION,
                   JAVA_TYPE,
                   VARIANT,
                   AMD64_URL, ARM64_URL,
                   SOURCE),
    base_image(MAJOR_VERSION, VARIANT, JAVA_HOME, JAVA_TYPE, BASE_SETUP_COMMAND)
        ::append_path(f"${JAVA_HOME}/bin")
        ::set_env("JAVA_HOME", JAVA_HOME)
        ::set_env("LANG", LANG)
        ::set_env("JAVA_VERSION", VERSION),
    (
        run(BASE_SETUP_COMMAND),
        locale(VARIANT, LANG),
        install_bin(AMD64_URL, ARM64_URL, JAVA_HOME, SOURCE)::copy(JAVA_HOME, JAVA_HOME),
        ca_certs(MAJOR_VERSION, JAVA_TYPE, VARIANT, JAVA_HOME),
        smoke_tests(MAJOR_VERSION, JAVA_TYPE)
    )::merge,
    entry_sh(MAJOR_VERSION, JAVA_TYPE, VARIANT).

openjdk(major_version, java_type, variant) :-
    (
        string_concat("windows", windows_image, variant),
        "0" = "1", # NOTE: no windows support atm. So this will intentionally always fail.
        openjdk_setup(major_version, version, java_type, variant, amd64_url, arm64_url, source)
            ::set_entrypoint("./entry.sh")
    ;
        openjdk_setup(major_version, version, java_type, variant, amd64_url, arm64_url, source)
            ::set_entrypoint("./entry.sh")
    ).

debian_variant("bullseye").
debian_variant("buster").
