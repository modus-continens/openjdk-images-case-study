# Could have a prefix predicate?
is_alpine(variant, alpine_version) :- variant = f"alpine${alpine_version}".
is_oracle(variant, oracle_version) :- variant = f"oraclelinux${oracle_version}".
is_debian(variant) :- debian_variant(variant). # HACK: to determine if (non-slim) debian base image, should replace.
is_debian_slim(variant, debian_suite) :- variant = f"slim-${debian_suite}".

oracle_commands(installer, cleaner, oracle_version) :-
    (
        oracle_version = "7",
        installer = "yum install -y",
        cleaner = "rm -rf /var/cache/yum"
    ;
        number_gt(oracle_version, "7"),
        installer = "microdnf install",
        cleaner = "microdnf clean all"
    ).

debian_suffix(suffix, java_type) :-
    (
        java_type = "jdk", suffix = "-scm"
    ;
        java_type = "jre", suffix = "-curl"
    ).
debian_image(variant, java_type) :-
    (
        # FIXME: some weirdness with groundness check in disjunction
        # maybe i should remove unused variables from the head when translating to ir?
        java_type = java_type,
        is_debian_slim(variant, debian_suite),
        image_name = f"debian:${debian_suite}-slim",
        from(image_name)
    ;
        is_debian(variant),
        debian_suffix(suffix, java_type),
        image_name = f"buildpack-deps:${variant}${suffix}",
        from(image_name)
    ).
debian_packages(packages, variant, major_version) :-
    (
        major_version = major_version,
        is_debian_slim(variant, debian_suite),
        packages = "ca-certificates p11-kit"
    ;
        is_debian(variant),
        number_geq(major_version, "13"),
        packages = "bzip2 unzip xz-utils binutils fontconfig libfreetype6 ca-certificates p11-kit"
    ;
        is_debian(variant),
        number_gt("13", major_version),
        packages = "bzip2 unzip xz-utils fontconfig libfreetype6 ca-certificates p11-kit"
    ).

backwards_compatibility(major_version, java_home) :-
    # backwards compatibility for debian versions < 16
    (
        number_gt("16", major_version),
        run(f"{ echo '#/bin/sh'; echo 'echo \"${java_home}\"'; } > /usr/local/bin/docker-java-home \
              && chmod +x /usr/local/bin/docker-java-home \
              && [ \"${java_home}\" = \"\$(docker-java-home)\" ]")
    ;
        number_geq(major_version, "16"),
        java_home = java_home,
        run("")
    ).

locale(variant, lang) :-
    (
        is_oracle(variant, oracle_version),
        oracle_version = "7",
        lang = "en_US.UTF-8"
    ;
        # fixme: actual else using negation
        (is_oracle(variant, oracle_version), number_gt(oracle_version, "7")
         ; is_alpine(variant, alpine_version)
         ; is_debian(variant)
         ; is_debian_slim(variant, debian_suite)),
        lang = "C.UTF-8"
    ).

arch_commands(variant, arch_printer, amd64_match, arm64_match, getter) :-
    (
        # feature idea: underscore syntax when you don't care about a binding, e.g. is_alpine(variant, _)
        is_alpine(variant, alpine_version),
        arch_printer = "apk --print-arch",
        amd64_match = "x86_64",
        arm64_match = "aarch64",
        getter = "wget -O"
    ;
        is_oracle(variant, oracle_version),
        arch_printer = "objdump=\"$(command -v objdump)\" && objdump --file-headers \"$objdump\" | awk -F '[:,]+[[:space:]]+' '$1 == \"architecture\" { print $2 }'",
        amd64_match = "i386:x86-64",
        arm64_match = "aarch64",
        getter = "curl -fL -o"
    ;
        # FIXME: actual else
        (is_debian(variant) ; is_debian_slim(variant, debian_suite)),
        arch_printer = "dpkg --print-architecture",
        amd64_match = "amd64",
        arm64_match = "arm64",
        getter = "wget --progress=dot:giga -O"
    ).

# selects base image and runs relevant initial commands to prepare it.
base_image(major_version, variant, java_home, java_type) :-
    (
        java_type = java_type,
        is_alpine(variant, alpine_version),
        from(f"alpine:${alpine_version}"),
        # NOTE: bash added for entrypoint script, it's not present in the real openjdk
        run("apk add --no-cache java-cacerts --upgrade bash"),
        java_home = f"/opt/openjdk-${major_version}"
    ;
        java_type = java_type,
        is_oracle(variant, oracle_version),
        oracle_commands(installer, cleaner, oracle_version),
        from(f"oraclelinux:${oracle_version}-slim"),
        run(f"set -eux; \
              ${installer} gzip tar binutils freetype fontconfig; \
              ${cleaner}"),
        java_home = f"/usr/java/openjdk-${major_version}"
    ;
        # FIXME: else debian, although there are more steps so it would act as an else.
        (is_debian(variant) ; is_debian_slim(variant, debian_suite)),
        debian_image(variant, java_type),
        debian_packages(packages, variant, major_version),
        run(f"set -eux; \
              apt-get update; \
              apt-get install -y --no-install-recommends ${packages}; \
              rm -rf /var/lib/apt/lists/*"),
        java_home = f"/usr/local/openjdk-${major_version}",
        backwards_compatibility(major_version, java_home)
    ).

gpg_check(variant) :-
    "0" = "0". # TODO

extract_bin(java_home) :-
    run(f"mkdir -p ${java_home}; \
          tar --extract \
                  --file openjdk.tgz \
                  --directory \"${java_home}\" \
                  --strip-components 1 \
                  --no-same-owner \
          ; \
          rm openjdk.tgz*;").

handle_binary(variant, amd64_url, arm64_url, java_home) :-
    arch_commands(variant, arch_printer, amd64_match, arm64_match, getter),
    (
        (
            # TODO: choose package based on source
            is_debian_slim(variant, debian_suite),
            prefetch_command = "savedAptMark=\"$(apt-mark showmanual)\"; \
                                apt-get update; \
                                apt-get install -y --no-install-recommends \
                                    dirmngr gnupg wget; \
                                rm -rf /var/lib/apt/lists/*;",
            postfetch_command = "apt-mark auto '.*' > /dev/null; \
                                 [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \
                                 apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;"
        ;
            # FIXME: proper else
            (is_alpine(variant, alpine_version) ; is_oracle(variant, oracle_version) ; is_debian(variant)),
            # no-ops
            prefetch_command = ":;",
            postfetch_command = ":;"
        ),
        run(f"set -eux; \
              ${prefetch_command} \
              arch=\"\$(${arch_printer})\"; \
              case \"\$arch\" in \
                  '${amd64_match}') \
                      downloadUrl='${amd64_url}'; \
                      ;; \
                  '${arm64_match}') \
                      downloadUrl='${arm64_url}'; \
                      ;; \
                  *) echo >&2 \"error: unsupported architecture: '\$arch'\"; exit 1 ;; \
              esac; \
              ${getter} openjdk.tgz \"\$downloadUrl\"; \
              ${postfetch_command}"),
        # TODO: SHA256 checksum
        gpg_check(variant), # NOTE: the postfetch command should actually go after this, but we need the env vars
        extract_bin(java_home)
    ).

ca_certs(major_version, java_type, variant, java_home) :-
    major_version = major_version, # more groundness inconvenience here.
    java_type = java_type,
    (
        major_version = "8", java_type = "jdk",
        cacerts_file = f"${java_home}/jre/lib/security/cacerts"
    ;
        (number_gt(major_version, "8") ; java_type = "jre"),
        cacerts_file = f"${java_home}/lib/security/cacerts"
    ),
    (
        is_alpine(variant, alpine_version),
        run(f"rm -rf \"${cacerts_file}\"; \
              ln -sT /etc/ssl/certs/java/cacerts \"${cacerts_file}\";")
    ;
        is_oracle(variant, oracle_version),
        run(f"rm -rf \"${cacerts_file}\"; \
              ln -sT /etc/pki/ca-trust/extracted/java/cacerts \"${cacerts_file}\"; \
              \
              ln -sfT \"${java_home}\" /usr/java/default; \
              ln -sfT \"${java_home}\" /usr/java/latest; \
              for bin in \"${java_home}/bin/\"*; do \
              base=\"\$(basename \"\$bin\")\"; \
              [ ! -e \"/usr/bin/\$base\" ]; \
              alternatives --install \"/usr/bin/\$base\" \"\$base\" \"\$bin\" 20000; \
              done;")
    ;
        (is_debian(variant) ; is_debian_slim(variant, debian_suite)),
        run(f"{ \
                  echo '#!/usr/bin/env bash'; \
                  echo 'set -Eeuo pipefail'; \
                  echo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth \"${cacerts_file}\"'; \
              } > /etc/ca-certificates/update.d/docker-openjdk; \
              chmod +x /etc/ca-certificates/update.d/docker-openjdk; \
              /etc/ca-certificates/update.d/docker-openjdk; \
              \
              find \"${java_home}/lib\" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf; \
              ldconfig;")
    ).

smoke_tests(major_version, java_type) :-
    (
        major_version = "8", java_type = "jdk",
        command = "javac -version; java -version"
    ;
        major_version = "8", java_type = "jre",
        command = "java -version"
    ;
        number_gt(major_version, "8"),
        (
            java_type = "jdk",
            command = "java -Xshare:dump; \
                       fileEncoding=\"$(echo 'System.out.println(System.getProperty(\"file.encoding\"))' | jshell -s -)\"; [ \"$fileEncoding\" = 'UTF-8' ]; rm -rf ~/.java; \
                       javac --version; \
                       java --version"
        ;
            java_type = "jre",
            command = "java -Xshare:dump; java --version"
        )
    ),
    run(command).

entry_sh(major_version, java_type) :-
    (
        major_version = "8", java_type = java_type,
        command = "bash" # HACK: probably shouldn't assume bash
    ;
        number_gt(major_version, "8"), java_type = "jre",
        command = "bash"
    ;
        number_gt(major_version, "8"), java_type = "jdk",
        command = "jshell" # jshell only launched if jdk
    ),
    run(f"echo '#!/bin/bash' > entry.sh; echo '${command}' >> entry.sh; chmod +x entry.sh").

openjdk_setup(major_version, version, java_type, variant, amd64_url, arm64_url) :-
    openjdk_config(major_version, version,
                   java_type,
                   variant,
                   amd64_url, arm64_url,
                   source),

    base_image(major_version, variant, java_home, java_type)
        ::append_path(f"${java_home}/bin")
        ::set_env("java_home", java_home)
        ::set_env("lang", lang)
        ::set_env("java_version", version),
    locale(variant, lang),
    (
        handle_binary(variant, amd64_url, arm64_url, java_home),
        ca_certs(major_version, java_type, variant, java_home),
        smoke_tests(major_version, java_type)
    )::merge,
    entry_sh(major_version, java_type).

openjdk(major_version, java_type, variant) :-
    (
        major_version = major_version,
        java_type = java_type,
        variant = f"windows/${windows_image}",
        "0" = "1", # todo: no windows support atm.
        from("failing-container:latest")
    ;
        openjdk_setup(major_version, version, java_type, variant, amd64_url, arm64_url)
            ::set_entrypoint("./entry.sh")
    ).

debian_variant("bullseye").
debian_variant("buster").
