# Could have a prefix predicate?
is_alpine(VARIANT, ALPINE_VERSION) :- VARIANT = f"alpine${ALPINE_VERSION}".
is_oracle(VARIANT, ORACLE_VERSION) :- VARIANT = f"oraclelinux${ORACLE_VERSION}".
is_debian(VARIANT) :- debian_variant(VARIANT). # HACK: to determine if (non-slim) debian base image, should replace.
is_debian_slim(VARIANT, DEBIAN_SUITE) :- VARIANT = f"slim-${DEBIAN_SUITE}".

oracle_commands(INSTALLER, CLEANER, ORACLE_VERSION) :-
    (
        ORACLE_VERSION = "7",
        INSTALLER = "yum install -y",
        CLEANER = "rm -rf /var/cache/yum"
    )
    ;
    (
        number_gt(ORACLE_VERSION, "7"),
        INSTALLER = "microdnf install",
        CLEANER = "microdnf clean all"
    ).

debian_suffix(SUFFIX, JAVA_TYPE) :-
    (JAVA_TYPE = "jdk", SUFFIX = "-scm")
    ;
    (JAVA_TYPE = "jre", SUFFIX = "-curl").
debian_image(VARIANT, JAVA_TYPE) :-
    (
        # FIXME: some weirdness with groundness check in disjunction
        # Maybe I should remove unused variables from the head when translating to IR?
        JAVA_TYPE = JAVA_TYPE,
        is_debian_slim(VARIANT, DEBIAN_SUITE),
        IMAGE_NAME = f"debian:${DEBIAN_SUITE}-slim",
        from(IMAGE_NAME)
    )
    ;
    (
        is_debian(VARIANT),
        debian_suffix(SUFFIX, JAVA_TYPE),
        IMAGE_NAME = f"buildpack-deps:${VARIANT}${SUFFIX}",
        from(IMAGE_NAME)
    ).
debian_packages(PACKAGES, VARIANT, MAJOR_VERSION) :-
    (
        MAJOR_VERSION = MAJOR_VERSION,
        is_debian_slim(VARIANT, DEBIAN_SUITE),
        PACKAGES = "ca-certificates p11-kit"
    )
    ;
    (
        is_debian(VARIANT),
        number_geq(MAJOR_VERSION, "13"),
        PACKAGES = "bzip2 unzip xz-utils binutils fontconfig libfreetype6 ca-certificates p11-kit"
    )
    ;
    (
        is_debian(VARIANT),
        number_gt("13", MAJOR_VERSION),
        PACKAGES = "bzip2 unzip xz-utils fontconfig libfreetype6 ca-certificates p11-kit"
    ).

backwards_compatibility(MAJOR_VERSION, JAVA_HOME) :-
    # backwards compatibility for debian versions < 16
    (
        number_gt("16", MAJOR_VERSION),
        run(f"{ echo '#/bin/sh'; echo 'echo \"${JAVA_HOME}\"'; } > /usr/local/bin/docker-java-home \
              && chmod +x /usr/local/bin/docker-java-home \
              && [ \"${JAVA_HOME}\" = \"\$(docker-java-home)\" ]")
    )
    ;
    (
        number_geq(MAJOR_VERSION, "16"),
        JAVA_HOME = JAVA_HOME,
        run("")
    ).

locale(VARIANT, LANG) :-
    (
        is_oracle(VARIANT, ORACLE_VERSION),
        ORACLE_VERSION = "7",
        LANG = "en_US.UTF-8"
    )
    ;
    (
        # FIXME: actual else using negation
        (is_oracle(VARIANT, ORACLE_VERSION), number_gt(ORACLE_VERSION, "7")
         ; is_alpine(VARIANT, ALPINE_VERSION)
         ; is_debian(VARIANT)
         ; is_debian_slim(VARIANT, DEBIAN_SUITE)),
        LANG = "C.UTF-8"
    ).

arch_commands(VARIANT, ARCH_PRINTER, AMD64_MATCH, ARM64_MATCH, GETTER) :-
    (
        # Feature idea: underscore syntax when you don't care about a binding, e.g. is_alpine(VARIANT, _)
        is_alpine(VARIANT, ALPINE_VERSION),
        ARCH_PRINTER = "apk --print-arch",
        AMD64_MATCH = "x86_64",
        ARM64_MATCH = "aarch64",
        GETTER = "wget -O"
    )
    ;
    (
        is_oracle(VARIANT, ORACLE_VERSION),
        ARCH_PRINTER = "objdump=\"$(command -v objdump)\" && objdump --file-headers \"$objdump\" | awk -F '[:,]+[[:space:]]+' '$1 == \"architecture\" { print $2 }'",
        AMD64_MATCH = "i386:x86-64",
        ARM64_MATCH = "aarch64",
        GETTER = "curl -fL -o"
    )
    ;
    (
        # FIXME: actual else
        (is_debian(VARIANT) ; is_debian_slim(VARIANT, DEBIAN_SUITE)),
        ARCH_PRINTER = "dpkg --print-architecture",
        AMD64_MATCH = "amd64",
        ARM64_MATCH = "arm64",
        GETTER = "wget --progress=dot:giga -O"
    ).

# Selects base image and runs relevant initial commands to prepare it.
base_image(MAJOR_VERSION, VARIANT, JAVA_HOME, JAVA_TYPE) :-
    (
        JAVA_TYPE = JAVA_TYPE,
        is_alpine(VARIANT, ALPINE_VERSION),
        from(f"alpine:${ALPINE_VERSION}"),
        # NOTE: bash added for entrypoint script, it's NOT present in the real OpenJDK
        run("apk add --no-cache java-cacerts --upgrade bash"),
        JAVA_HOME = f"/opt/openjdk-${MAJOR_VERSION}"
    )
    ;
    (
        JAVA_TYPE = JAVA_TYPE,
        is_oracle(VARIANT, ORACLE_VERSION),
        oracle_commands(INSTALLER, CLEANER, ORACLE_VERSION),
        from(f"oraclelinux:${ORACLE_VERSION}-slim"),
        run(f"set -eux; \
              ${INSTALLER} gzip tar binutils freetype fontconfig; \
              ${CLEANER}"),
        JAVA_HOME = f"/usr/java/openjdk-${MAJOR_VERSION}"
    )
    ;
    (
        # FIXME: else debian, although there are more steps so it would act as an else.
        (is_debian(VARIANT) ; is_debian_slim(VARIANT, DEBIAN_SUITE)),
        debian_image(VARIANT, JAVA_TYPE),
        debian_packages(PACKAGES, VARIANT, MAJOR_VERSION),
        run(f"set -eux; \
              apt-get update; \
              apt-get install -y --no-install-recommends ${PACKAGES}; \
              rm -rf /var/lib/apt/lists/*"),
        JAVA_HOME = f"/usr/local/openjdk-${MAJOR_VERSION}",
        backwards_compatibility(MAJOR_VERSION, JAVA_HOME)
    ).

gpg_check(VARIANT) :-
    "0" = "0". # TODO

extract_bin(JAVA_HOME) :-
    run(f"mkdir -p ${JAVA_HOME}; \
          tar --extract \
                  --file openjdk.tgz \
                  --directory \"${JAVA_HOME}\" \
                  --strip-components 1 \
                  --no-same-owner \
          ; \
          rm openjdk.tgz*;").

handle_binary(VARIANT, AMD64_URL, ARM64_URL, JAVA_HOME) :-
    arch_commands(VARIANT, ARCH_PRINTER, AMD64_MATCH, ARM64_MATCH, GETTER),
    (
        (
            # TODO: choose package based on source
            is_debian_slim(VARIANT, DEBIAN_SUITE),
            PREFETCH_COMMAND = "savedAptMark=\"$(apt-mark showmanual)\"; \
                                apt-get update; \
                                apt-get install -y --no-install-recommends \
                                    dirmngr gnupg wget; \
                                rm -rf /var/lib/apt/lists/*;",
            POSTFETCH_COMMAND = "apt-mark auto '.*' > /dev/null; \
                                 [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \
                                 apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;"
        ;
            # FIXME: proper else
            (is_alpine(VARIANT, ALPINE_VERSION) ; is_oracle(VARIANT, ORACLE_VERSION) ; is_debian(VARIANT)),
            # no-ops
            PREFETCH_COMMAND = ":;",
            POSTFETCH_COMMAND = ":;"
        ),
        run(f"set -eux; \
              ${PREFETCH_COMMAND} \
              arch=\"\$(${ARCH_PRINTER})\"; \
              case \"\$arch\" in \
                  '${AMD64_MATCH}') \
                      downloadUrl='${AMD64_URL}'; \
                      ;; \
                  '${ARM64_MATCH}') \
                      downloadUrl='${ARM64_URL}'; \
                      ;; \
                  *) echo >&2 \"error: unsupported architecture: '\$arch'\"; exit 1 ;; \
              esac; \
              ${GETTER} openjdk.tgz \"\$downloadUrl\"; \
              ${POSTFETCH_COMMAND}"),
        # TODO: SHA256 checksum
        gpg_check(VARIANT), # NOTE: the postfetch command should actually go after this, but we need the env vars
        extract_bin(JAVA_HOME)
    ).

ca_certs(MAJOR_VERSION, JAVA_TYPE, VARIANT, JAVA_HOME) :-
    MAJOR_VERSION = MAJOR_VERSION, # More groundness inconvenience here.
    JAVA_TYPE = JAVA_TYPE,
    (
        MAJOR_VERSION = "8", JAVA_TYPE = "jdk",
        CACERTS_FILE = f"${JAVA_HOME}/jre/lib/security/cacerts"
    ;
        (number_gt(MAJOR_VERSION, "8") ; JAVA_TYPE = "jre"),
        CACERTS_FILE = f"${JAVA_HOME}/lib/security/cacerts"
    ),
    (
        is_alpine(VARIANT, ALPINE_VERSION),
        run(f"rm -rf \"${CACERTS_FILE}\"; \
              ln -sT /etc/ssl/certs/java/cacerts \"${CACERTS_FILE}\";")
    ;
        is_oracle(VARIANT, ORACLE_VERSION),
        run(f"rm -rf \"${CACERTS_FILE}\"; \
              ln -sT /etc/pki/ca-trust/extracted/java/cacerts \"${CACERTS_FILE}\"; \
              \
              ln -sfT \"${JAVA_HOME}\" /usr/java/default; \
              ln -sfT \"${JAVA_HOME}\" /usr/java/latest; \
              for bin in \"${JAVA_HOME}/bin/\"*; do \
              base=\"\$(basename \"\$bin\")\"; \
              [ ! -e \"/usr/bin/\$base\" ]; \
              alternatives --install \"/usr/bin/\$base\" \"\$base\" \"\$bin\" 20000; \
              done;")
    ;
        (is_debian(VARIANT) ; is_debian_slim(VARIANT, DEBIAN_SUITE)),
        run(f"{ \
                  echo '#!/usr/bin/env bash'; \
                  echo 'set -Eeuo pipefail'; \
                  echo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth \"${CACERTS_FILE}\"'; \
              } > /etc/ca-certificates/update.d/docker-openjdk; \
              chmod +x /etc/ca-certificates/update.d/docker-openjdk; \
              /etc/ca-certificates/update.d/docker-openjdk; \
              \
              find \"${JAVA_HOME}/lib\" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf; \
              ldconfig;")
    ).

smoke_tests(MAJOR_VERSION, JAVA_TYPE) :-
    (
        MAJOR_VERSION = "8", JAVA_TYPE = "jdk",
        COMMAND = "javac -version; java -version"
    ;
        MAJOR_VERSION = "8", JAVA_TYPE = "jre",
        COMMAND = "java -version"
    ;
        number_gt(MAJOR_VERSION, "8"),
        (
            JAVA_TYPE = "jdk",
            COMMAND = "java -Xshare:dump; \
                       fileEncoding=\"$(echo 'System.out.println(System.getProperty(\"file.encoding\"))' | jshell -s -)\"; [ \"$fileEncoding\" = 'UTF-8' ]; rm -rf ~/.java; \
                       javac --version; \
                       java --version"
        ;
            JAVA_TYPE = "jre",
            COMMAND = "java -Xshare:dump; java --version"
        )
    ),
    run(COMMAND).

entry_sh(MAJOR_VERSION, JAVA_TYPE) :-
    (
        MAJOR_VERSION = "8", JAVA_TYPE = JAVA_TYPE,
        COMMAND = "bash" # HACK: Probably shouldn't assume bash
    ;
        number_gt(MAJOR_VERSION, "8"), JAVA_TYPE = "jre",
        COMMAND = "bash"
    ;
        number_gt(MAJOR_VERSION, "8"), JAVA_TYPE = "jdk",
        COMMAND = "jshell" # jshell only launched if jdk
    ),
    run(f"echo '#!/bin/bash' > entry.sh; echo '${COMMAND}' >> entry.sh; chmod +x entry.sh").

openjdk_setup(MAJOR_VERSION, VERSION, JAVA_TYPE, VARIANT, AMD64_URL, ARM64_URL) :-
    openjdk_config(MAJOR_VERSION, VERSION,
                   JAVA_TYPE,
                   VARIANT,
                   AMD64_URL, ARM64_URL,
                   SOURCE),

    base_image(MAJOR_VERSION, VARIANT, JAVA_HOME, JAVA_TYPE)
        ::append_path(f"${JAVA_HOME}/bin")
        ::set_env("JAVA_HOME", JAVA_HOME)
        ::set_env("LANG", LANG)
        ::set_env("JAVA_VERSION", VERSION),
    locale(VARIANT, LANG),
    (
        handle_binary(VARIANT, AMD64_URL, ARM64_URL, JAVA_HOME),
        ca_certs(MAJOR_VERSION, JAVA_TYPE, VARIANT, JAVA_HOME),
        smoke_tests(MAJOR_VERSION, JAVA_TYPE)
    )::merge,
    entry_sh(MAJOR_VERSION, JAVA_TYPE).

openjdk(MAJOR_VERSION, JAVA_TYPE, VARIANT) :-
    (
        MAJOR_VERSION = MAJOR_VERSION,
        JAVA_TYPE = JAVA_TYPE,
        VARIANT = f"windows/${WINDOWS_IMAGE}",
        "0" = "1", # TODO: no windows support atm.
        from("failing-container:latest")
    )
    ;
    (
        openjdk_setup(MAJOR_VERSION, VERSION, JAVA_TYPE, VARIANT, AMD64_URL, ARM64_URL)
            ::set_entrypoint("./entry.sh")
    ).

debian_variant("bullseye").
debian_variant("buster").
