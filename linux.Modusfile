# Could have a prefix predicate?
is_alpine(VARIANT, ALPINE_VERSION) :- VARIANT = f"alpine${ALPINE_VERSION}".
is_oracle(VARIANT, ORACLE_VERSION) :- VARIANT = f"oraclelinux${ORACLE_VERSION}".

oracle_commands(INSTALLER, CLEANER, ORACLE_VERSION) :-
    (ORACLE_VERSION = "7", INSTALLER = "yum install -y", CLEANER = "rm -rf /var/cache/yum")
    ;
    # TODO: use number_gt
    (ORACLE_VERSION = "8", INSTALLER = "microdnf install", CLEANER = "microdnf clean all").

is_debian_slim(VARIANT, DEBIAN_SUITE) :- VARIANT = f"slim-${DEBIAN_SUITE}".
debian_suffix(SUFFIX, JAVA_TYPE) :- (JAVA_TYPE = "jdk", SUFFIX = "-scm") ; (JAVA_TYPE = "jre", SUFFIX = "-curl").
debian_image(VARIANT, JAVA_TYPE) :-
    (
        # FIXME: some weirdness with groundness check in disjunction
        # Maybe I should remove unused variables from the head when translating to IR?
        JAVA_TYPE = JAVA_TYPE,
        is_debian_slim(VARIANT, DEBIAN_SUITE),
        IMAGE_NAME = f"debian:${DEBIAN_SUITE}-slim",
        from(IMAGE_NAME)
    )
    ;
    (
        debian_suffix(SUFFIX, JAVA_TYPE),
        IMAGE_NAME = f"buildpack-deps:${VARIANT}${SUFFIX}",
        from(IMAGE_NAME)
    ).
debian_packages(PACKAGES, VARIANT, MAJOR_VERSION) :-
    # TODO: determine exact packages to install to base l78-101
    VARIANT = VARIANT,
    MAJOR_VERSION = MAJOR_VERSION,
    PACKAGES = "bzip2 unzip xz-utils binutils fontconfig libfreetype6 ca-certificates p11-kit".

backwards_compatibility(JAVA_HOME) :-
    run(f"{ echo '#/bin/sh'; echo 'echo \"${JAVA_HOME}\"'; } > /usr/local/bin/docker-java-home \
          && chmod +x /usr/local/bin/docker-java-home \
          && [ \"${JAVA_HOME}\" = \"\$(docker-java-home)\" ]").

locale(VARIANT, LANG) :-
    (
        is_oracle(VARIANT, ORACLE_VERSION),
        ORACLE_VERSION = "7",
        LANG = "en_US.UTF-8"
    )
    ;
    (
        # FIXME: this won't act as an else, negation may be necessary.
        VARIANT = VARIANT,
        # TODO: make sure this is ok to set on Alpine
        LANG = "C.UTF-8"
    ).

arch_commands(VARIANT, ARCH_PRINTER, AMD64_MATCH, ARM64_MATCH, GETTER) :-
    (
        # Feature idea: underscore syntax when you don't care about a binding, e.g. is_alpine(VARIANT, _)
        is_alpine(VARIANT, ALPINE_VERSION),
        ARCH_PRINTER = "apk --print-arch",
        AMD64_MATCH = "x86_64",
        ARM64_MATCH = "aarch64",
        GETTER = "wget -O"
    )
    ;
    (
        is_oracle(VARIANT, ORACLE_VERSION),
        ARCH_PRINTER = "objdump=\"$(command -v objdump)\" && objdump --file-headers \"$objdump\" | awk -F '[:,]+[[:space:]]+' '$1 == \"architecture\" { print $2 }'",
        AMD64_MATCH = "x86_64",
        ARM64_MATCH = "aarch64",
        GETTER = "curl -fL -o"
    )
    ;
    (
        # FIXME: this won't act as an else
        VARIANT = VARIANT,
        ARCH_PRINTER = "dpkg --print-architecture",
        AMD64_MATCH = "amd64",
        ARM64_MATCH = "arm64",
        GETTER = "wget --progress=dot:giga -O"
    ).

# Selects base image and runs relevant initial commands to prepare it.
base_image(MAJOR_VERSION, VARIANT, JAVA_HOME, JAVA_TYPE) :-
    (
        JAVA_TYPE = JAVA_TYPE,
        is_alpine(VARIANT, ALPINE_VERSION),
        from(f"alpine:${ALPINE_VERSION}"),
        run("apk add --no-cache java-cacerts"),
        JAVA_HOME = f"/opt/openjdk-${MAJOR_VERSION}"
    )
    ;
    (
        JAVA_TYPE = JAVA_TYPE,
        is_oracle(VARIANT, ORACLE_VERSION),
        oracle_commands(INSTALLER, CLEANER, ORACLE_VERSION),
        from(f"oraclelinux:${ORACLE_VERSION}-slim"),
        run(f"set -eux; \
              ${INSTALLER} gzip tar binutils freetype fontconfig; \
              ${CLEANER}"),
        JAVA_HOME = f"/usr/java/openjdk-${MAJOR_VERSION}"
    )
    ;
    (
        # FIXME: else debian, although there are more steps so it would act as an else.
        debian_image(VARIANT, JAVA_TYPE),
        debian_packages(PACKAGES, VARIANT, MAJOR_VERSION),
        # FIXME: format strings and string continuation
        run(f"set -eux; \
              apt-get update; \
              apt-get install -y --no-install-recommends ${PACKAGES}; \
              rm -rf /var/lib/apt/lists/*"),
        JAVA_HOME = f"/usr/local/openjdk-${MAJOR_VERSION}"
    ).

gpg_check(VARIANT) :-
    "0" = "0". # TODO

extract_bin(JAVA_HOME) :-
    run(f"mkdir -p ${JAVA_HOME}; \
          tar --extract \
                  --file openjdk.tgz \
                  --directory \"${JAVA_HOME}\" \
                  --strip-components 1 \
                  --no-same-owner \
          ; \
          rm openjdk.tgz*;").

handle_binary(VARIANT, AMD64_URL, ARM64_URL, JAVA_HOME) :-
    arch_commands(VARIANT, ARCH_PRINTER, AMD64_MATCH, ARM64_MATCH, GETTER),
    (
        is_debian_slim(VARIANT, DEBIAN_SUITE),
        # TODO: choose package based on source
        run("savedAptMark=\"$(apt-mark showmanual)\"; \
            apt-get update; \
            apt-get install -y --no-install-recommends \
                dirmngr gnupg wget; \
            rm -rf /var/lib/apt/lists/*;")
        ;
        # FIXME: proper else
        VARIANT = VARIANT, run("") # no-op
    ),
    run(f"set -eux; \
          arch=\"\$(${ARCH_PRINTER})\"; \
          case \"\$arch\" in \
              '${AMD64_MATCH}') \
                  downloadUrl='${AMD64_URL}'; \
                  ;; \
              '${ARM64_MATCH}') \
                  downloadUrl='${ARM64_URL}'; \
                  ;; \
              *) echo >&2 \"error: unsupported architecture: '\$arch'\"; exit 1 ;; \
          esac; \
          ${GETTER} openjdk.tgz \"\$downloadUrl\";"),
    # TODO: SHA256 checksum
    gpg_check(VARIANT),
    extract_bin(JAVA_HOME).

ca_certs(VARIANT, JAVA_HOME) :-
    "0" = "0". # TODO

smoke_tests(MAJOR_VERSION, JAVA_TYPE) :-
    "0" = "0". # TODO

entry_sh(JAVA_HOME, LANG, VERSION, JAVA_TYPE, COMMAND) :-
    (
        JAVA_TYPE = "jdk", COMMAND = "jshell"
        ;
        JAVA_TYPE = "jre", COMMAND = "java --version"
    ),
    run(f"echo '#!/bin/bash' > entry.sh; \
          echo 'export JAVA_HOME='${JAVA_HOME}' && export LANG='${LANG}' && export JAVA_VERSION='${VERSION}' && export PATH=${JAVA_HOME}/bin:\$PATH; ${COMMAND}' >> entry.sh; \
          chmod +x entry.sh").

openjdk_setup(MAJOR_VERSION, VERSION, JAVA_TYPE, VARIANT, AMD64_URL, ARM64_URL) :-
    openjdk_config(MAJOR_VERSION, VERSION, JAVA_TYPE, VARIANT, AMD64_URL, ARM64_URL),

    base_image(MAJOR_VERSION, VARIANT, JAVA_HOME, JAVA_TYPE),
    backwards_compatibility(JAVA_HOME),
    # TODO append_path(f"${JAVA_HOME}/bin"), # replacement for `ENV PATH $JAVA_HOME/bin:$PATH`
    locale(VARIANT, LANG),
    handle_binary(VARIANT, AMD64_URL, ARM64_URL, JAVA_HOME),
    ca_certs(VARIANT, JAVA_HOME),
    smoke_tests(MAJOR_VERSION, JAVA_TYPE),
    entry_sh(JAVA_HOME, LANG, VERSION, JAVA_TYPE, COMMAND).

openjdk(MAJOR_VERSION, VERSION, JAVA_TYPE, VARIANT, AMD64_URL, ARM64_URL) :-
    openjdk_setup(MAJOR_VERSION, VERSION, JAVA_TYPE, VARIANT, AMD64_URL, ARM64_URL)::set_entrypoint("./entry.sh").

# Valid variations of OpenJDK
# TODO: GPG keys, SHA256
# NOTE:
# - the official Dockerfile template file is also 'aware' of the architectures allowed.
# - the major version is separated because some JDK versions don't follow semver.
openjdk_config("11", "11.0.13", "jdk", "bullseye", "https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.13%2B8/OpenJDK11U-jdk_x64_linux_11.0.13_8.tar.gz", "https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.13%2B8/OpenJDK11U-jdk_aarch64_linux_11.0.13_8.tar.gz").
openjdk_config("18", "18-ea+11", "jdk", "alpine3.15", "https://download.java.net/java/early_access/alpine/11/binaries/openjdk-18-ea+11_linux-x64-musl_bin.tar.gz", "").
